trigger:
- master

jobs:
- job: Build_Windows
  pool:
    vmImage: 'VS2017-Win2016'
  steps:
  - task: MSBuild@1
    displayName: 'Compile libijg* libraries'
    inputs:
      solution: "src/Native/Windows64/build_ALL/libijg*.x64.vcxproj"
      platform: 'x64'
      msbuildArchitecture: 'x64'
      configuration: 'Release'
  - task: MSBuild@1
    displayName: 'Compile Windows library'
    inputs:
      solution: "src/Native/Windows64/build_ALL/Efferent.Native-win64.vcxproj"
      platform: 'x64'
      msbuildArchitecture: 'x64'
      configuration: 'Release'
  - task: PublishPipelineArtifact@0
    displayName: 'Publish Windows artifacts'
    inputs:
      artifactName: 'lib-windows64'
      targetPath: 'src/Native/Windows64/build_ALL/bin/x64/Release/Efferent.Native-win64'
- job: Build_Ubuntu
  dependsOn: Build_Windows
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - script: |
      cd src/Native/Linux64/build_ALL
      cmake ./CMakeLists.txt
      make
    displayName: 'Compile Ubuntu library'
  - task: PublishPipelineArtifact@0
    displayName: 'Publish Ubuntu artifacts'
    inputs:
      artifactName: 'lib-linux64'
      targetPath: 'src/Native/Linux64/build_ALL/bin'
  - task: DotNetCoreCLI@2
    displayName: Compile managed library
    inputs:
      command: 'build'
      projects: 'src/efferent-native.csproj'
      feedsToUse: 'select'
      versioningScheme: 'off'
  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(Build.ArtifactStagingDirectory)/lib-linux64'
      Contents: '*.so'
      TargetFolder: '$(Build.SourcesDirectory)/test'
      flattenFolders: true
  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(Build.ArtifactStagingDirectory)/lib-windows64'
      Contents: '*.dll'
      TargetFolder: '$(Build.SourcesDirectory)/test'
      flattenFolders: true
  - task: DotNetCoreCLI@2
    displayName: Unit tests
    inputs:
      command: 'test'
      projects: 'test/*.csproj'
      testRunTitle: 'dicom-native unit tests'
      feedsToUse: 'select'
      versioningScheme: 'off'
